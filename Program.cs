using System;
using System.IO;
using System.Security.Cryptography;

class AESExample
{
    static void Main(string[] args)
    {
        if (args.Length != 1)
        {
            Console.WriteLine("Usage: AESExample <file path>");
            return;
        }

        string filePath = args[0]; // File path provided as command line argument

        string passphrase = "MySecretPassphrase"; // Passphrase for key derivation

        byte[] salt = new byte[16]; // Salt for key derivation (16 bytes)
        byte[] key = DeriveKeyFromPassphrase(passphrase, salt, 32); // 256-bit key (32 bytes)
        byte[] iv = DeriveKeyFromPassphrase(passphrase, salt, 16); // 128-bit IV (16 bytes)

        try
        {
            byte[] plaintextBytes = File.ReadAllBytes(filePath); // Read file content as bytes

            byte[] ciphertext = EncryptBytes(plaintextBytes, key, iv);

            string encryptedFilePath = filePath + ".encrypted"; // New file path for encrypted content
            File.WriteAllBytes(encryptedFilePath, ciphertext); // Write encrypted content to new file

            byte[] decryptedBytes = DecryptBytes(ciphertext, key, iv);

            string decryptedFilePath = filePath + ".decrypted";
            File.WriteAllBytes(decryptedFilePath, decryptedBytes); // Write encrypted content to new file


            Console.WriteLine("Encryption successful. Encrypted file created: " + encryptedFilePath);
            Console.WriteLine("Decryption successful. Encrypted file created: " + decryptedFilePath);

        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    static byte[] EncryptBytes(byte[] plaintextBytes, byte[] key, byte[] iv)
    {
        using (Aes aes = Aes.Create())
        {
            aes.Key = key;
            aes.IV = iv;

            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, aes.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(plaintextBytes, 0, plaintextBytes.Length);
                }

                return ms.ToArray();
            }
        }
    }

    static byte[] DecryptBytes(byte[] ciphertext, byte[] key, byte[] iv)
    {
        using (Aes aes = Aes.Create())
        {
            aes.Key = key;
            aes.IV = iv;

            using (MemoryStream ms = new MemoryStream(ciphertext))
            {
                using (CryptoStream cs = new CryptoStream(ms, aes.CreateDecryptor(), CryptoStreamMode.Read))
                {
                    using (MemoryStream plaintextMs = new MemoryStream())
                    {
                        byte[] buffer = new byte[1024];
                        int bytesRead;
                        while ((bytesRead = cs.Read(buffer, 0, buffer.Length)) > 0)
                        {
                            plaintextMs.Write(buffer, 0, bytesRead);
                        }

                        return plaintextMs.ToArray();
                    }
                }
            }
        }
    }

    static byte[] DeriveKeyFromPassphrase(string passphrase, byte[] salt, int keySizeInBytes)
    {
        using (Rfc2898DeriveBytes pbkdf2 = new Rfc2898DeriveBytes(passphrase, salt, 10000))
        {
            return pbkdf2.GetBytes(keySizeInBytes);
        }
    }
}
